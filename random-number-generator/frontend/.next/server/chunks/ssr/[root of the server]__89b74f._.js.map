{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/pudge1000-7/GolandProjects/rollapp-evm/contracts/frontend/coin-flip-game/app/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button, TextField, Radio, RadioGroup, FormControlLabel } from '@mui/material';\nimport { toast } from 'react-hot-toast';\nimport { ethers } from 'ethers'; // Используем ethers для контрактов\n// import CoinFlipABI from './CoinFlipABI.json'; // Путь к ABI вашего контракта\n\nconst CoinFlipABI =\n[\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_randomnessGenerator\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gameId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"player\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"won\",\n        type: \"bool\",\n      },\n    ],\n    name: \"GameCompleted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gameId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"player\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum CoinFlip.CoinSide\",\n        name: \"choice\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"GameCreated\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_gameId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"completeGame\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"enum CoinFlip.CoinSide\",\n        name: \"choice\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"createGame\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"gameId\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"games\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"player\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum CoinFlip.CoinSide\",\n        name: \"playerChoice\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"randomnessId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"enum CoinFlip.GameStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"won\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_gameId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getGameResult\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"player\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum CoinFlip.CoinSide\",\n        name: \"playerChoice\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"enum CoinFlip.GameStatus\",\n        name: \"status\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"won\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"randomnessGenerator\",\n    outputs: [\n      {\n        internalType: \"contract RandomnessGenerator\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default function CoinFlipGame() {\n  const [bet, setBet] = useState(1);\n  const [side, setSide] = useState('heads');\n  const [balance, setBalance] = useState(100);\n  const [isFlipping, setIsFlipping] = useState(false);\n  const [result, setResult] = useState<'heads' | 'tails' | null>(null);\n  const [error, setError] = useState('');\n  const [provider, setProvider] = useState<any>(null); // Поставим any, чтобы не было проблем с типами\n  const [signer, setSigner] = useState<any>(null);\n  const [coinFlipContract, setCoinFlipContract] = useState<any>(null);\n  const [connected, setConnected] = useState(false);\n\n  const CONTRACT_ADDRESS = '0xb590e26c1f5F24a9ff29F3e7D24eC7eba2ab05d4'; // Введите адрес задеплоенного контракта\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const initWeb3 = async () => {\n        const ethereum = window.ethereum;\n        // Проверка на доступность MetaMask\n        if (typeof ethereum !== 'undefined') {\n          try {\n            const web3Provider = new ethers.BrowserProvider(ethereum);\n\n            const network = await web3Provider.getNetwork();\n            console.log('Connected to network:', network.name, 'with chainId', network.chainId);\n\n            const userSigner = await web3Provider.getSigner();\n            const contract = new ethers.Contract(CONTRACT_ADDRESS, CoinFlipABI, userSigner);\n\n            setProvider(web3Provider);\n            setSigner(userSigner);\n            setCoinFlipContract(contract);\n            setConnected(true);\n          } catch (err) {\n            console.error('Failed to connect to MetaMask', err);\n            setError('Failed to connect to MetaMask');\n          }\n        } else {\n          setError('Please install MetaMask');\n        }\n      };\n\n      initWeb3()\n    } else {\n      setError('Please install MetaMask');\n    }\n  }, []);\n\n  const flipCoin = async () => {\n    console.log(\"flipping the coin\")\n\n    if (!connected) {\n      setError('Please connect to MetaMask');\n      return;\n    }\n\n    if (bet > balance) {\n      setError('Insufficient balance for this bet');\n      return;\n    }\n\n    setError('');\n    setIsFlipping(true);\n    setResult(null);\n\n    try {\n      const currentNonce = await provider.getTransactionCount(signer.address, \"latest\");\n\n      const sideEnum = side === 'heads' ? 0 : 1; // 0 - HEADS, 1 - TAILS\n      const tx = await coinFlipContract.createGame(sideEnum);\n      await tx.wait()\n      const gameId = await coinFlipContract.gameId()\n      console.log('Game created with ID:', gameId);\n\n\n      await sleep(1500);\n      setTimeout(async () => {\n        await completeGame(gameId);\n      }, 5000);\n\n    } catch (err) {\n      console.error('Error flipping the coin:', err);\n      setIsFlipping(false);\n      setError('Error interacting with the contract');\n    }\n  };\n\n  const completeGame = async (gameId: string) => {\n    console.log(`completing the game with ID:${gameId}`)\n    try {\n      const currentNonce = await provider.getTransactionCount(signer.address, \"latest\");\n\n      const tx = await coinFlipContract.completeGame(gameId, {\n        nonce: currentNonce\n      });\n\n      await tx.wait()\n\n      const gameResult = await coinFlipContract.getGameResult(gameId);\n      console.log(gameResult);\n\n      if (gameResult.status == 0) {\n        throw (`Game wasn't finished.`);\n      }\n      const didWin = gameResult.won;\n      const playerChoice = gameResult.playerChoice === 0 ? 'heads' : 'tails'\n      const flipResult = didWin ? playerChoice : (playerChoice === 'heads' ? 'tails' : 'heads');\n\n      setResult(flipResult);\n      setIsFlipping(false);\n\n      // Обновляем баланс\n      if (didWin) {\n        setBalance(balance + bet);\n        toast.success(`You won $${bet}. Your new balance is $${balance + bet}.`);\n      } else {\n        setBalance(balance - bet);\n        toast.error(`You lost $${bet}. Your new balance is $${balance - bet}.`);\n      }\n    } catch (err) {\n      console.error('Error completing game:', err);\n      setIsFlipping(false);\n      setError('Error completing the game');\n    }\n  };\n\n  return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-purple-400 via-pink-500 to-red-500\">\n        <div className=\"p-8 bg-white rounded-lg shadow-xl w-full max-w-md\">\n          <h1 className=\"text-3xl font-bold text-center mb-6\">Coin Flip Game</h1>\n\n          {error && <div className=\"text-red-500 text-center mb-4\">{error}</div>}\n\n          <div className=\"mb-6 text-center\">\n            <motion.div\n                className=\"w-32 h-32 rounded-full bg-yellow-400 mx-auto flex items-center justify-center\"\n                animate={{\n                  rotateY: isFlipping ? 1800 : 0,\n                  scale: isFlipping ? 1.2 : 1,\n                }}\n                transition={{ duration: 2 }}\n            >\n              {result && <div className=\"text-2xl font-bold\">{result === 'heads' ? 'Heads' : 'Tails'}</div>}\n            </motion.div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <TextField\n                  label=\"Your Bet ($)\"\n                  type=\"number\"\n                  value={bet}\n                  onChange={(e) => setBet(Math.max(1, parseInt(e.target.value)))}\n                  fullWidth\n                  inputProps={{ min: 1, max: balance }}\n              />\n            </div>\n\n            <RadioGroup value={side} onChange={(e) => setSide(e.target.value)}>\n              <FormControlLabel value=\"heads\" control={<Radio />} label=\"Heads\" />\n              <FormControlLabel value=\"tails\" control={<Radio />} label=\"Tails\" />\n            </RadioGroup>\n\n            <Button variant=\"contained\" onClick={flipCoin} disabled={isFlipping} fullWidth>\n              {isFlipping ? 'Flipping...' : 'Flip Coin'}\n            </Button>\n\n            <div className=\"text-center text-xl font-semibold\">Balance: ${balance}</div>\n          </div>\n        </div>\n      </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAGA;AACA,4SAAiC,mCAAmC;AAHpE;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;;;;;;;AAOA,+EAA+E;AAE/E,MAAM,cACN;IACE;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,MAAM;IACR;IACA;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,iBAAiB;QACjB,MAAM;IACR;IACA;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;SACD;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACR;YACA;gBACE,c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"}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}